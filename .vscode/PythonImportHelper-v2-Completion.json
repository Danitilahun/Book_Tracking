[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Book",
        "importPath": "models.book",
        "description": "models.book",
        "isExtraImport": true,
        "detail": "models.book",
        "documentation": {}
    },
    {
        "label": "Book",
        "importPath": "models.book",
        "description": "models.book",
        "isExtraImport": true,
        "detail": "models.book",
        "documentation": {}
    },
    {
        "label": "BookRepository",
        "importPath": "repository.book_repository",
        "description": "repository.book_repository",
        "isExtraImport": true,
        "detail": "repository.book_repository",
        "documentation": {}
    },
    {
        "label": "BookRepository",
        "importPath": "repository.book_repository",
        "description": "repository.book_repository",
        "isExtraImport": true,
        "detail": "repository.book_repository",
        "documentation": {}
    },
    {
        "label": "create_client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "BookEndpoints",
        "importPath": "api.book_endpoints",
        "description": "api.book_endpoints",
        "isExtraImport": true,
        "detail": "api.book_endpoints",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "database.db_connection",
        "description": "database.db_connection",
        "isExtraImport": true,
        "detail": "database.db_connection",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "BookEndpoints",
        "kind": 6,
        "importPath": "server.api.book_endpoints",
        "description": "server.api.book_endpoints",
        "peekOfCode": "class BookEndpoints:\n    def __init__(self, book_repo: BookRepository):\n        self.router = APIRouter()\n        self.book_repo = book_repo\n        self.setup_routes()\n    def setup_routes(self):\n        @self.router.post(\"/\", status_code=201)\n        def create_book(book: Book):\n            created_book = self.book_repo.create_book(book)\n            if created_book:",
        "detail": "server.api.book_endpoints",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "kind": 6,
        "importPath": "server.database.db_connection",
        "description": "server.database.db_connection",
        "peekOfCode": "class DatabaseConnection:\n    def __init__(self, url: str, key: str):\n        self.url = url\n        self.key = key\n        self.supabase: Optional[Client] = None\n    def create_supabase_client(self):\n        self.supabase = create_client(self.url, self.key)\n    def connect(self):\n        if self.supabase is None:\n            self.create_supabase_client()",
        "detail": "server.database.db_connection",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "server.models.book",
        "description": "server.models.book",
        "peekOfCode": "class Book:\n    id: Optional[int] = None\n    title: Optional[str] = None\n    status:  Optional[str] = None\n    def __post_init__(self):\n        if self.status not in [\"To-Read\", \"In-Progress\", \"Completed\"]:\n            raise ValueError(\"Status should be one of: To-Read, In-Progress, Completed\")",
        "detail": "server.models.book",
        "documentation": {}
    },
    {
        "label": "BookRepository",
        "kind": 6,
        "importPath": "server.repository.book_repository",
        "description": "server.repository.book_repository",
        "peekOfCode": "class BookRepository:\n    def __init__(self, supabase: Client):\n        self.supabase = supabase\n    def create_book(self, book: Book) -> Optional[Book]:\n        print(book.title)\n        new_book = self.supabase.from_(\"books\") \\\n            .insert({\"title\": book.title, \"status\": book.status}) \\\n            .execute()\n        if new_book and new_book.data:\n            created_book = new_book.data[0]",
        "detail": "server.repository.book_repository",
        "documentation": {}
    },
    {
        "label": "test_fetch_all_books",
        "kind": 2,
        "importPath": "server.tests.test_book",
        "description": "server.tests.test_book",
        "peekOfCode": "def test_fetch_all_books():\n    response = client.get(\"/books\")\n    assert response.status_code == 200\n    assert \"title\" in response.json()[0] and \"status\" in response.json()[0] and \"id\" in response.json()[0]\ndef test_add_book():\n    global book_data\n    response = client.post(\"/books\", json=book_data)\n    assert response.status_code == 201\n    response_json = response.json()\n    response_json.pop('id', None) ",
        "detail": "server.tests.test_book",
        "documentation": {}
    },
    {
        "label": "test_add_book",
        "kind": 2,
        "importPath": "server.tests.test_book",
        "description": "server.tests.test_book",
        "peekOfCode": "def test_add_book():\n    global book_data\n    response = client.post(\"/books\", json=book_data)\n    assert response.status_code == 201\n    response_json = response.json()\n    response_json.pop('id', None) \n    assert response_json == book_data\n    response = client.post(\"/books\", json=wrong_data)\n    assert response.status_code == 422\n    assert response.json()[\"detail\"][0][\"msg\"] == \"Input should be a valid string\"",
        "detail": "server.tests.test_book",
        "documentation": {}
    },
    {
        "label": "test_update_book_status",
        "kind": 2,
        "importPath": "server.tests.test_book",
        "description": "server.tests.test_book",
        "peekOfCode": "def test_update_book_status():\n    global book_data\n    response = client.get(\"/books\")\n    book_id = response.json()[0][\"id\"]\n    updated_status = {\"status\": \"In-Progress\"}\n    response = client.put(f\"/books/{book_id}\", json=updated_status)\n    assert response.status_code == 200\n    assert response.json()[\"message\"] == \"Book status updated successfully\"\ndef test_delete_book():\n    global book_data",
        "detail": "server.tests.test_book",
        "documentation": {}
    },
    {
        "label": "test_delete_book",
        "kind": 2,
        "importPath": "server.tests.test_book",
        "description": "server.tests.test_book",
        "peekOfCode": "def test_delete_book():\n    global book_data\n    response = client.get(\"/books\")\n    book_id = response.json()[0][\"id\"]\n    response = client.delete(f\"/books/{book_id}\")\n    assert response.status_code == 200",
        "detail": "server.tests.test_book",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "server.tests.test_book",
        "description": "server.tests.test_book",
        "peekOfCode": "client = TestClient(app)\nbook_data = {\"title\": \"48 Laws of Power\", \"status\": \"To-Read\"}\nwrong_data = {\"title\": 11, \"status\": \"To-Readed\"}\nwrong_data2 = {\"title\":\"48 Laws of Power\", \"status\": \"To-Readed\"}\ndef test_fetch_all_books():\n    response = client.get(\"/books\")\n    assert response.status_code == 200\n    assert \"title\" in response.json()[0] and \"status\" in response.json()[0] and \"id\" in response.json()[0]\ndef test_add_book():\n    global book_data",
        "detail": "server.tests.test_book",
        "documentation": {}
    },
    {
        "label": "book_data",
        "kind": 5,
        "importPath": "server.tests.test_book",
        "description": "server.tests.test_book",
        "peekOfCode": "book_data = {\"title\": \"48 Laws of Power\", \"status\": \"To-Read\"}\nwrong_data = {\"title\": 11, \"status\": \"To-Readed\"}\nwrong_data2 = {\"title\":\"48 Laws of Power\", \"status\": \"To-Readed\"}\ndef test_fetch_all_books():\n    response = client.get(\"/books\")\n    assert response.status_code == 200\n    assert \"title\" in response.json()[0] and \"status\" in response.json()[0] and \"id\" in response.json()[0]\ndef test_add_book():\n    global book_data\n    response = client.post(\"/books\", json=book_data)",
        "detail": "server.tests.test_book",
        "documentation": {}
    },
    {
        "label": "wrong_data",
        "kind": 5,
        "importPath": "server.tests.test_book",
        "description": "server.tests.test_book",
        "peekOfCode": "wrong_data = {\"title\": 11, \"status\": \"To-Readed\"}\nwrong_data2 = {\"title\":\"48 Laws of Power\", \"status\": \"To-Readed\"}\ndef test_fetch_all_books():\n    response = client.get(\"/books\")\n    assert response.status_code == 200\n    assert \"title\" in response.json()[0] and \"status\" in response.json()[0] and \"id\" in response.json()[0]\ndef test_add_book():\n    global book_data\n    response = client.post(\"/books\", json=book_data)\n    assert response.status_code == 201",
        "detail": "server.tests.test_book",
        "documentation": {}
    },
    {
        "label": "wrong_data2",
        "kind": 5,
        "importPath": "server.tests.test_book",
        "description": "server.tests.test_book",
        "peekOfCode": "wrong_data2 = {\"title\":\"48 Laws of Power\", \"status\": \"To-Readed\"}\ndef test_fetch_all_books():\n    response = client.get(\"/books\")\n    assert response.status_code == 200\n    assert \"title\" in response.json()[0] and \"status\" in response.json()[0] and \"id\" in response.json()[0]\ndef test_add_book():\n    global book_data\n    response = client.post(\"/books\", json=book_data)\n    assert response.status_code == 201\n    response_json = response.json()",
        "detail": "server.tests.test_book",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server.main",
        "description": "server.main",
        "peekOfCode": "app = FastAPI()\n# Setup cors\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# Retrieve URL and key from environment variables",
        "detail": "server.main",
        "documentation": {}
    },
    {
        "label": "supabase_url",
        "kind": 5,
        "importPath": "server.main",
        "description": "server.main",
        "peekOfCode": "supabase_url = os.getenv(\"URL\")\nsupabase_key = os.getenv(\"KEY\")\ndb_connection = DatabaseConnection(url=supabase_url, key=supabase_key)\ndb_connection.connect()\nsupabase_client = db_connection.supabase\nbook_repository = BookRepository(supabase_client)\nbook_endpoints = BookEndpoints(book_repository)\napp.include_router(book_endpoints.router, prefix=\"/books\")",
        "detail": "server.main",
        "documentation": {}
    },
    {
        "label": "supabase_key",
        "kind": 5,
        "importPath": "server.main",
        "description": "server.main",
        "peekOfCode": "supabase_key = os.getenv(\"KEY\")\ndb_connection = DatabaseConnection(url=supabase_url, key=supabase_key)\ndb_connection.connect()\nsupabase_client = db_connection.supabase\nbook_repository = BookRepository(supabase_client)\nbook_endpoints = BookEndpoints(book_repository)\napp.include_router(book_endpoints.router, prefix=\"/books\")",
        "detail": "server.main",
        "documentation": {}
    },
    {
        "label": "db_connection",
        "kind": 5,
        "importPath": "server.main",
        "description": "server.main",
        "peekOfCode": "db_connection = DatabaseConnection(url=supabase_url, key=supabase_key)\ndb_connection.connect()\nsupabase_client = db_connection.supabase\nbook_repository = BookRepository(supabase_client)\nbook_endpoints = BookEndpoints(book_repository)\napp.include_router(book_endpoints.router, prefix=\"/books\")",
        "detail": "server.main",
        "documentation": {}
    },
    {
        "label": "supabase_client",
        "kind": 5,
        "importPath": "server.main",
        "description": "server.main",
        "peekOfCode": "supabase_client = db_connection.supabase\nbook_repository = BookRepository(supabase_client)\nbook_endpoints = BookEndpoints(book_repository)\napp.include_router(book_endpoints.router, prefix=\"/books\")",
        "detail": "server.main",
        "documentation": {}
    },
    {
        "label": "book_repository",
        "kind": 5,
        "importPath": "server.main",
        "description": "server.main",
        "peekOfCode": "book_repository = BookRepository(supabase_client)\nbook_endpoints = BookEndpoints(book_repository)\napp.include_router(book_endpoints.router, prefix=\"/books\")",
        "detail": "server.main",
        "documentation": {}
    },
    {
        "label": "book_endpoints",
        "kind": 5,
        "importPath": "server.main",
        "description": "server.main",
        "peekOfCode": "book_endpoints = BookEndpoints(book_repository)\napp.include_router(book_endpoints.router, prefix=\"/books\")",
        "detail": "server.main",
        "documentation": {}
    }
]